#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π backup –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Server Check
–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π backup —Ç–æ–ª—å–∫–æ —Å –≤–∞–∂–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
"""

import os
import shutil
import zipfile
from datetime import datetime
from pathlib import Path

def quick_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ backup'–∞"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"quick_backup_{timestamp}"
    backup_file = f"backups/{backup_name}.zip"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backups –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("backups", exist_ok=True)
    
    print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ backup: {backup_name}")
    print("=" * 50)
    
    # –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è backup'–∞
    important_files = [
        "app/",
        "templates/",
        "static/",
        "requirements.txt",
        "alembic.ini",
        "server_check.db",
        ".env",
        "README.md"
    ]
    
    try:
        with zipfile.ZipFile(backup_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for item in important_files:
                if os.path.exists(item):
                    if os.path.isdir(item):
                        for root, dirs, files in os.walk(item):
                            for file in files:
                                file_path = os.path.join(root, file)
                                arcname = os.path.relpath(file_path)
                                zipf.write(file_path, arcname)
                        print(f"   ‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {item}")
                    else:
                        zipf.write(item, item)
                        print(f"   ‚úì –§–∞–π–ª: {item}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {item}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size = os.path.getsize(backup_file)
        size_mb = size / (1024 * 1024)
        
        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π backup —Å–æ–∑–¥–∞–Ω!")
        print(f"üìÅ –§–∞–π–ª: {backup_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
        
        return backup_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")
        return None

if __name__ == "__main__":
    quick_backup()
