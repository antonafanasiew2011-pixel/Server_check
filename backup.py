#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è backup –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Server Check
"""

import os
import shutil
import sqlite3
import json
import zipfile
from datetime import datetime
from pathlib import Path
import subprocess
import sys

class ServerCheckBackup:
    def __init__(self, backup_dir="backups"):
        self.backup_dir = Path(backup_dir)
        self.backup_dir.mkdir(exist_ok=True)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_name = f"server_check_backup_{self.timestamp}"
        self.backup_path = self.backup_dir / self.backup_name
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ backup –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ backup: {self.backup_name}")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è backup
            self.backup_path.mkdir(exist_ok=True)
            
            # 1. –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
            print("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞...")
            self._copy_source_code()
            
            # 2. –°–æ–∑–¥–∞–µ–º backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            self._backup_database()
            
            # 3. –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            print("‚öôÔ∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self._copy_config_files()
            
            # 4. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...")
            self._create_archive()
            
            # 5. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            self._cleanup()
            
            print("‚úÖ Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìÅ –ü—É—Ç—å: {self.backup_path}.zip")
            print(f"üìä –†–∞–∑–º–µ—Ä: {self._get_file_size(self.backup_path.with_suffix('.zip'))}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")
            self._cleanup()
            return False
            
        return True
    
    def _copy_source_code(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        source_files = [
            "app/",
            "templates/",
            "static/",
            "alembic/",
            "requirements.txt",
            "alembic.ini",
            "README.md",
            "CSRF_SETUP.md",
            "IMMEDIATE_IMPROVEMENTS.md",
            "MONITORING_SETUP.md",
            "telegram_setup.md"
        ]
        
        for item in source_files:
            if os.path.exists(item):
                if os.path.isdir(item):
                    shutil.copytree(item, self.backup_path / item)
                else:
                    shutil.copy2(item, self.backup_path / item)
                print(f"   ‚úì {item}")
    
    def _backup_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        db_file = "server_check.db"
        if os.path.exists(db_file):
            # –°–æ–∑–¥–∞–µ–º SQL dump
            dump_file = self.backup_path / "database_dump.sql"
            self._create_sql_dump(db_file, dump_file)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            shutil.copy2(db_file, self.backup_path / db_file)
            print(f"   ‚úì {db_file}")
            print(f"   ‚úì database_dump.sql")
        else:
            print("   ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def _create_sql_dump(self, db_file, dump_file):
        """–°–æ–∑–¥–∞–Ω–∏–µ SQL dump –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(db_file)
            with open(dump_file, 'w', encoding='utf-8') as f:
                for line in conn.iterdump():
                    f.write(f"{line}\n")
            conn.close()
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQL dump: {e}")
    
    def _copy_config_files(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        config_files = [
            ".env",
            ".env.example",
            "config.py",
            "alembic.ini"
        ]
        
        for config_file in config_files:
            if os.path.exists(config_file):
                shutil.copy2(config_file, self.backup_path / config_file)
                print(f"   ‚úì {config_file}")
    
    def _create_archive(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞"""
        archive_path = self.backup_path.with_suffix('.zip')
        
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(self.backup_path):
                for file in files:
                    file_path = Path(root) / file
                    arcname = file_path.relative_to(self.backup_path)
                    zipf.write(file_path, arcname)
        
        print(f"   ‚úì –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path.name}")
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.backup_path.exists():
            shutil.rmtree(self.backup_path)
    
    def _get_file_size(self, file_path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        size = os.path.getsize(file_path)
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} TB"
    
    def list_backups(self):
        """–°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö backup'–æ–≤"""
        print("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ backup'—ã:")
        print("=" * 50)
        
        if not self.backup_dir.exists():
            print("   –ù–µ—Ç backup'–æ–≤")
            return
        
        backups = []
        for file in self.backup_dir.glob("*.zip"):
            stat = file.stat()
            backups.append({
                'name': file.name,
                'size': self._get_file_size(file),
                'date': datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
            })
        
        if not backups:
            print("   –ù–µ—Ç backup'–æ–≤")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        backups.sort(key=lambda x: x['date'], reverse=True)
        
        for i, backup in enumerate(backups, 1):
            print(f"   {i}. {backup['name']}")
            print(f"      üìÖ {backup['date']}")
            print(f"      üìä {backup['size']}")
            print()
    
    def restore_backup(self, backup_name):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup'–∞"""
        backup_file = self.backup_dir / backup_name
        
        if not backup_file.exists():
            print(f"‚ùå Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_name}")
            return False
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup: {backup_name}")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            temp_dir = Path("temp_restore")
            temp_dir.mkdir(exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(backup_file, 'r') as zipf:
                zipf.extractall(temp_dir)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            self._restore_files(temp_dir)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            shutil.rmtree(temp_dir)
            
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _restore_files(self, temp_dir):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
        for item in temp_dir.iterdir():
            if item.is_dir():
                if item.name in ["app", "templates", "static", "alembic"]:
                    if os.path.exists(item.name):
                        shutil.rmtree(item.name)
                    shutil.copytree(item, item.name)
                    print(f"   ‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {item.name}")
            else:
                if item.name in ["requirements.txt", "alembic.ini", "README.md"]:
                    shutil.copy2(item, item.name)
                    print(f"   ‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {item.name}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_file = temp_dir / "server_check.db"
        if db_file.exists():
            shutil.copy2(db_file, "server_check.db")
            print("   ‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_files = [".env", "config.py"]
        for config_file in config_files:
            config_path = temp_dir / config_file
            if config_path.exists():
                shutil.copy2(config_path, config_file)
                print(f"   ‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥: {config_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    backup = ServerCheckBackup()
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "create":
            backup.create_backup()
        elif command == "list":
            backup.list_backups()
        elif command == "restore" and len(sys.argv) > 2:
            backup_name = sys.argv[2]
            backup.restore_backup(backup_name)
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            print_help()
    else:
        print_help()

def print_help():
    """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏"""
    print("üîß Server Check Backup Tool")
    print("=" * 50)
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python backup.py create     - –°–æ–∑–¥–∞—Ç—å backup")
    print("  python backup.py list       - –°–ø–∏—Å–æ–∫ backup'–æ–≤")
    print("  python backup.py restore <name> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup'–∞")
    print()
    print("–ü—Ä–∏–º–µ—Ä—ã:")
    print("  python backup.py create")
    print("  python backup.py list")
    print("  python backup.py restore server_check_backup_20240115_143025.zip")

if __name__ == "__main__":
    main()
